#!/usr/bin/env python

#
# Assumes a role in another AWS account. Used for cross-account
# deployment so that multiple credentials do not need to be
# managed on the build agents.
#

import boto3
import argparse
import os

parser = argparse.ArgumentParser(
    description='Assumes the AWS IAM role specified.')
parser.add_argument(
    '--role-arn', required=True,
    help='specify the IAM role ARN to assume')
parser.add_argument(
    '--role-session-name', required=True,
    help='specify the name to give the session')
parser.add_argument(
    '--output', required=True,
    help='the file path to output the credentials')

def format_credential_vars(env):
    return '\n'.join('{} = {}'.format(k, v) for k, v in env.items())

def parse_credential_vars(credentials):
    return {
        'aws_access_key_id': credentials['AccessKeyId'],
        'aws_secret_access_key': credentials['SecretAccessKey'],
        'aws_session_token': credentials['SessionToken']
    }

def assume_role(role_arn, role_session_name, output):
    client = boto3.client('sts')
    response = client.assume_role(
        RoleArn=role_arn,
        RoleSessionName=role_session_name
    )
    with open(output, 'w') as f:
        f.write('[default]\n{}\n'.format(format_credential_vars(parse_credential_vars(response['Credentials']))))

if __name__ == '__main__':
    args = parser.parse_args()

    assume_role(args.role_arn, args.role_session_name, args.output)
