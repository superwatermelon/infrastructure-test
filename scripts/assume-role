#!/usr/bin/env python

#
# Assumes a role in another AWS account. Used for cross-account
# deployment so that multiple credentials do not need to be
# managed on the build agents.
#

import boto3
import argparse
import os

parser = argparse.ArgumentParser(
    description='Assumes the AWS IAM role specified.')
parser.add_argument(
    '--role-arn', required=True,
    help='specify the IAM role ARN to assume')
parser.add_argument(
    '--role-session-name', required=True,
    help='specify the name to give the session')

def format_env_vars(env):
    return '\n'.join('export {}="{}"'.format(k, v) for k, v in env.items())

def parse_env_vars(credentials):
    return {
        'AWS_ACCESS_KEY_ID': credentials['AccessKeyId'],
        'AWS_SECRET_ACCESS_KEY': credentials['SecretAccessKey'],
        'AWS_SESSION_TOKEN': credentials['SessionToken']
    }

def assume_role(role_arn, role_session_name):
    client = boto3.client('sts')
    response = client.assume_role(
        RoleArn=role_arn,
        RoleSessionName=role_session_name
    )
    print(format_env_vars(parse_env_vars(response['Credentials'])))

if __name__ == '__main__':
    args = parser.parse_args()

    assume_role(args.role_arn, args.role_session_name)
