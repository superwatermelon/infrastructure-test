#!/usr/bin/env python

#
# Generates public private key pairs for SSH access and imports the
# public component into AWS.
#
# Requires AWS credentials to be available in the environment, i.e.
# AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY or AWS_DEFAULT_PROFILE
# or AWS_PROFILE with respective config in ~/.aws/credentials
#

#
# The SSH public private keys are generated outside of Terraform, they
# should be generated and stored securely in a vault or encrypted in S3.
# It is recommended to set up individual users for accessing the instances
# rather than distributing the private SSH key.
#
# The Terraform documentation for TLS private keys notes:
#
# > Important Security Notice The private key generated by this resource
# > will be stored unencrypted in your Terraform state file. Use of this
# > resource for production deployments is not recommended. Instead,
# > generate a private key file outside of Terraform and distribute it
# > securely to the system where Terraform will be run.
#

import boto3
import argparse

parser = argparse.ArgumentParser(
    description='Manages key pairs for Tools infrastructure.')
parser.add_argument(
    '--swarm-manager-key-pair', required=True,
    help='specify the key pair name for the Swarm Manager')
parser.add_argument(
    '--swarm-worker-key-pair', required=True,
    help='specify the key pair name for Swarm Workers')

def key(client, name):
    """
    Ensures an AWS SSH key pair exists with the given name,
    if the key pair does not already exist is it created.
    """

    response = client.describe_key_pairs(
        Filters=[{'Name':'key-name','Values':[name]}])

    if not len(response['KeyPairs']):
        response = client.create_key_pair(KeyName=name)
        with open('{0}.key'.format(name), 'w') as content_file:
            content_file.write(response['KeyMaterial'])

def main():
    args = parser.parse_args()

    swarm_manager_key_pair = args.swarm_manager_key_pair
    swarm_worker_key_pair = args.swarm_worker_key_pair

    client = boto3.client('ec2')

    key(client, swarm_manager_key_pair)
    key(client, swarm_worker_key_pair)

if __name__ == '__main__':
    main()
